#!/bin/bash
source ~/1bash
source ~/Resources
source ~/8Coins
CCOIN
MAKE_WTM_LOGS
source ~/Logs/WTM_ccoin
COIN=$CCOIN
CURRENT_COIN=$COIN
while true
do
echo -e "${N}"
echo -e "${BB}"
WTM_AVERAGE_REV=$(awk '{s+=$1}END{print "",s/NR}' RS="\n"  /home/m1/Alerts/WTM_24H_REV)
  #Waiting for miner start before start switching
    if [[ -z  $(ps ax | grep SCREEN | grep miner | grep -v cpuminer) ]];then
      echo "Miner not running" | tee -a $LOG3_FILE
      echo "" | tee -a $LOG3_FILE
      while [[ -z  $(ps ax | grep SCREEN | grep miner | grep -v cpuminer) ]];  do
        echo "Miner still not running, waiting ..." | tee -a $LOG3_FILE
        echo "" | tee -a $LOG3_FILE
        sleep 5
      done
      echo "Miner is running now" | tee -a $LOG3_FILE
    fi
    if [[ -n  $(ps ax | grep SCREEN | grep miner | grep -v cpuminer) ]];  then
      #If miner running time is lower than given time don't check for better coin
      MINER_TIME=$(ps -eo pid,etimes | grep $(ps -ef | grep SCREEN | grep miner | grep -v cpuminer | head -1 | awk '{print $2}') | awk '{print $2}')
      MINER_TIME_MIN=$(( $MINER_TIME / 60 ))
      if [[ $MINER_TIME_MIN -lt $WTM_MINIMUM_MINING_TIME ]] ; then
        echo "Mining $CURRENT_COIN for $MINER_TIME_MIN minutes , looking for a better coin to mine in less than $(($WTM_MINIMUM_MINING_TIME - $MINER_TIME_MIN)) minutes" | tee -a $LOG3_FILE
        sleep $(( (($WTM_MINIMUM_MINING_TIME - $MINER_TIME_MIN)) * 60 ))
        echo  "Looking for better coin" | tee -a $LOG3_FILE
      else
        echo "Mining $CURRENT_COIN for $MINER_TIME_MIN minutes, looking for a better coin to mine" | tee -a $LOG3_FILE
      fi
    fi

    python2.7 '/home/m1/WTM_SWITCHER' /home/m1/WTM.json  | tee -a $LOG3_FILE
    sleep 5
    TOP_COIN=$(cat /home/m1/Logs/WTM_top_coin | sed 's/:[0-9]*//')
    TIMEIN=$WTM_AUTO_SWITCH_SYNC_INTERVAL
    TIMEOUT=$(($TIMEIN * 60))
    if [[ "$CURRENT_COIN" != "$TOP_COIN" ]]; then
echo -e "${N}"
echo -e "${BG}"
	OLDCOIN=$CURRENT_COIN
      sed -i '/^#/!s/'CCOIN=\"$CURRENT_COIN\"'/'CCOIN=\"$TOP_COIN\"/'' /home/m1/Logs/WTM_ccoin
      cat /home/m1/Logs/WTM_current_revenue | grep `cat /home/m1/Logs/WTM_top_coin | awk -F: '{print $1}'` | awk -F: '{print $2}' >> /home/m1/Alerts/WTM_24H_REV
      SYNC_COUNT=$((`expr 1440 / $WTM_AUTO_SWITCH_SYNC_INTERVAL`))
      echo "$(tail -$SYNC_COUNT /home/m1/Alerts/WTM_24H_REV)" > /home/m1/Alerts/WTM_24H_REV
      sed -i '/^$/d' /home/m1/Alerts/WTM_24H_REV
      sleep 1
      echo "Current Coin: $CURRENT_COIN" | tee -a $LOG3_FILE
      echo "Top Coin: $TOP_COIN" | tee -a $LOG3_FILE

        if [[ -n  $(ps ax | grep -i screen | grep miner) ]]; then
          echo "Miner is running, lets make the switch" | tee -a $LOG3_FILE
          target=$(ps ax | grep -v cpuminer | grep -i screen | grep miner | awk '"miner" {print $1}')
          kill $target
          sleep 0.1
          #start new miner
          echo "    Commencing Miner Start Command" | tee -a $LOG3_FILE
		CHECK_MINER
            sudo pkill -e $TMINER
	    sudo pkill -f $TMINER
		3Main_Coin_Sequence
		CURRENT_COIN=$TOP_COIN
          echo "$(date) Mining switched from $OLDCOIN to $TOP_COIN" | tee -a $LOG3_FILE $WTM_HISTORY
          echo "Check again in $TIMEOUT seconds" | tee -a $LOG3_FILE
        fi

      echo "$(date) - Mining switched from $OLDCOIN to $TOP_COIN" | tee -a $LOG3_FILE $WTM_HISTORY
      echo "24 Hour Average Revenue: $WTM_AVERAGE_REV"
      echo "Check again in $TIMEOUT seconds" | tee -a $LOG3_FILE
      echo "" | tee -a $LOG3_FILE
      echo "" | tee -a $LOG3_FILE

      sleep $TIMEOUT
    else
      echo "$(date) - Same Coin on Top, Continue mining $CURRENT_COIN"   | tee -a $LOG3_FILE
      echo "24 Hour Average Revenue: $WTM_AVERAGE_REV"
      echo "Check again in $TIMEOUT seconds" | tee -a $LOG3_FILE
      echo "" | tee -a $LOG3_FILE
      echo "" | tee -a $LOG3_FILE
      sleep 1
      cat /home/m1/Logs/WTM_current_revenue | grep `cat /home/m1/Logs/WTM_top_coin | awk -F: '{print $1}'` | awk -F: '{print $2}' >> /home/m1/Alerts/WTM_24H_REV
      SYNC_COUNT=$((`expr 1440 / $WTM_AUTO_SWITCH_SYNC_INTERVAL`))
      echo "$(tail -$SYNC_COUNT /home/m1/Alerts/WTM_24H_REV)" > /home/m1/Alerts/WTM_24H_REV
      sed -i '/^$/d' /home/m1/Alerts/WTM_24H_REV
      sleep $TIMEOUT
    fi
echo -e "${N}"
done
#!/bin/bash

# 8CoinsV2 FUNCTIONS :

# 3Main_Coin_Sequence : Run 8Coins

################## TO DO ##################

# Gives 4 options for 1Coins (All, Top, Questions, Nicehash)      - DONE
# Mutli-Algorithms                                                - DONE	
# CPU Mining  cpu mining is already present in resources 	        - DONE	
#     - Centralize it to 8Coins


# Extra options on miners	(OPTS)          	                      - To be tested
#                             Tested on ZM and ALCCMiner
# Dual-Mining (Claymore)					                                - To be tested
	
	
# Dual-Mining non-dual coins (ex : ZEN and XVG) 
#                             by adding GPUS options
# NiceHash implementation
# Benchmark

###########################################

################ VARIABLES ################

DIR='/home/m1/8CoinsV2'
BLUE='\033[0;34m'
RED='\033[1;31m'
NC='\033[0m'

###########################################

################## SETUP ##################

source $HOME/1bash
source $HOME/Resources

if [ -f $DIR/1Coins ]; then
  source $DIR/1Coins
fi

if [ -f $DIR/1Coins-Nicehash ]; then
  source $DIR/1Coins-Nicehash
fi

if [ $WTM_AUTO_SWITCH = "YES" ]; then
  source ~/Logs/WTM_ccoin
  COIN=$CCOIN
fi

###########################################

################# TESTING #################

# For testing purposes only
#COIN="XVG"
#rm $DIR/Coins.json
#rm $DIR/1Coins
#rm $DIR/1Coins-Nicehash
#rm $DIR/Algo.json

###########################################

############### MINERS PATH ###############

ETHMINER='/home/m1/Miners/ethminer/ethminer' # ethminer this program is a binary the update is simple - Ethereum
CCMINER='/home/m1/Miners/ccminer/ccminer' # -All other
CCMINERXEVAN='/home/m1/Miners/ccminer-xevan/ccminer' # special ccminer-xevan
ZM='/home/m1/Miners/zec/zm/5_8/zm'		# zm this program is a binary the update is simple? - Equihash
EWBF='/home/m1/Miners/zec/ewbf/ewbf'	# ewbf this program is a binary the update is simple - Equihash
ALCCMINER='/home/m1/Miners/alccminer/ccminer'
TKCCMINER='/home/m1/Miners/TKccminer/ccminer'
CLAYMORE='/home/m1/Miners/eth/Claymore/ethdcrminer64'

# CPUMINEROPT='/home/m1/Miners/cpuminer-opt/./cpuminer'
# OPTIMINER="/home/m1/Miners/optiminer-equihash/optiminer-equihash"
# $cgminer = '/home/m1/Miners/cgminer/cgminer'# cgminer this program is a binary the update is simple - multi algo
# $vertminer='/home/m1/Miners/vertminer/ccminer'
# $kxccminer='/home/m1/Miners/KXccminer-skunk/ccminer'
# $tpccminer='/home/m1/Miners/TPccminer/ccminer'
# $claymore='/home/m1/Miners/eth/$CLAYMORE_VERSION/ethdcrminer64'
# $GenoilU='/home/m1/Miners/eth/Genoil-U/ethminer'

###########################################

################ FUNCTIONS ################

BLAKE_TEST(){
  if [[ $ALG = "Blake (2s)" ]]; then
    ALG="Blake2s"
  fi
  if [[ $ALGO = "Blake (2s)" ]]; then
    ALGO="Blake2s"
  fi
}

ifExist(){
result=`ps aux | grep -i $MINSOFT | grep -v "grep" | wc -l`
  if [ $result -ge 1 ]; then
    echo -e "${BLUE}Miner is running!${NC}"
	  TRY=5
	  :
  else
    echo -e "${RED}Miner is not running, trying a lib fix $TRY/3${NC}"
    if [[ $TRY = 1 ]]; then  
      miner_fix2
      sleep 5
    fi
    if [[ $TRY = 2 ]]; then
      echo -e "${RED}Error${NC}"
 	    :
    fi
  fi
}

###########################################

########### CHECK COIN/ALGO VAR ###########
3Main_Coin_Sequence(){
  if [[ $COIN != *";"* ]]; then
    if [ $COIN != "Nicehash" ]; then
      ALGO=$(cat $DIR/Algo.json | jq -r --arg COIN "$COIN" '.coins[] | select(.tag==$COIN) | .algorithm')
      BLAKE_TEST
      if [ -z "$ALGO" ]; then
        ALGO=$(eval "echo \$$(echo ${COIN}_ALGO)")
        BLAKE_TEST
        if [ -z "$ALGO" ]; then
          echo -e "${RED}Couldnt find the algorithm in our list of coin"
          read -p "Enter the algorithm : " ALGO 
          BLAKE_TEST
          echo "${COIN}_ALGO=${ALGO}" >> $DIR/1Coins
        fi
      fi
    
      #TEST IF VARIABLE HAS MULTIPLE LINE (MULTI-ALGO)
      ALGO_TEST=$ALGO
      if (( $(grep -c . <<<"$ALGO") > 1 )); then
        ALGO=$(eval "echo \$$(echo ${COIN}_ALGO)")
        if [ -z "$ALGO" ]; then   
          echo -e "${RED}Your coin has multiple algorithms"
          ALGO="${ALGO_TEST//$'\n'/"/"}"
          read -p "Enter the algorithm you want ($ALGO): " ALGO
          BLAKE_TEST
          echo "${COIN}_ALGO=${ALGO}" >> $DIR/1Coins      
        fi  
      fi
    fi
    echo "Selected coin is : $COIN"
    echo "Algorithm is : $ALGO"
  else
    echo "Dual Mining DETECTED!"
    DUAL1=$(echo "${COIN%;*}")
    DUAL2=$(echo "${COIN#*;}")
    echo "DUAL1 = $DUAL1\nDUAL2 = $DUAL2"
    COIN="Dual"
    ALGO="Dual"
  fi

  ###########################################

  ############## CHOOSE MINER ###############

  # ZM or EWBF
  if [ $ALGO = "Equihash" ]; then   
    ZM_OR_EWBF=$ZM_or_EWBF
    if [ $ZM_OR_EWBF = "ZM" ]; then
      echo -e "${BLUE}$ALGO - Opening ZM${NC}"
      API="telemetry=127.0.0.1:42000"
      MINSOFT=$ZM
    fi
    if [ $ZM_OR_EWBF = "EWBF" ]; then
      echo -e "${BLUE}$ALGO - Opening EWBF${NC}"
      API="api 127.0.0.1:42000"
      MINSOFT=$EWBF
    fi
    if [ $ZM_OR_EWBF != "ZM" ] && [ $ZM_OR_EWBF != "EWBF" ]; then 
      echo -e "${RED}Error in your ZM_or_EWBF variable in 1bash"
      echo -e "opening with default settings (DSTM)${NC}"
      echo "$ALGO - Opening ZM"
      API="telemetry=127.0.0.1:42000"
      MINSOFT=$ZM
    fi
  fi 

  # ALCCMINER
  if [ $ALGO = "X11" ] || [ $ALGO = "X17" ]; then   
    echo -e "${BLUE}$ALGO - Opening ALCCMiner${NC}"
    MINSOFT=$ALCCMINER
  fi
	
  # ETHMINER
  if [ $ALGO = "Hashimoto" ]; then 
    echo -e "${BLUE}$ALGO - Opening Ethmminer${NC}" 
    MINSOFT=$ETHMINER
  fi

  # XEVAN
  if [ $ALGO = "Xevan" ]; then 
    echo -e "${BLUE}$ALGO - Opening CCMiner-Xevan${NC}" 
    MINSOFT=$CCMINERXEVAN
  fi

  # TKCCMINER ( attention Neoscrypt != NeoScrypt )
  if [ $ALGO = "NeoScrypt" ]; then
    echo -e "${BLUE}$ALGO - Opening TKCCMiner${NC}" 
    MINSOFT=$TKCCMINER
  fi

  # CCMINER
  if [ $ALGO != "Equihash" ] && [ $ALGO != "ETH" ] && [ $ALGO != "XEVAN" ] && [ $ALGO != "Hashimoto" ] && [ $ALGO != "Scrypt" ] && [ $ALGO != "X11" ] && [ $ALGO != "X17" ] && [ $ALGO != "NeoScrypt" ] && [ $ALGO != "Dual" ]; then
    echo -e "${BLUE}$ALGO - Opening CCMiner${NC}" 
    MINSOFT=$CCMINER
  fi

  # Claymore Dual ( only )
  if [ $ALGO = "Dual" ]; then
   echo "${BLUE}Dual Mining - Opening Claymore"
   MINSOFT=$CLAYMORE
  fi


  # OPTIMINER - MIX
  # if [ $ALGO = "Equi192,7" ] || [ $ALGO = "Mars" ]; then
  #  echo "$ALGO - Opening Optiminer"
  #  OPTIMINER
  # fi

  ###########################################

  ############# SETUP COIN VARS #############
  
  if [ $COIN != "Nicehash" ] && [ $COIN != "Dual" ]; then
    COIN_ALGO=$(eval "echo \$$(echo ${COIN}_ALGO)")
    if [ -z $COIN_ALGO ]; then
      WORKER=$(eval "echo \$$(echo ${COIN}_WORKER)")
      ADDRESS=$(eval "echo \$$(echo ${COIN}_ADDRESS)")
      POOL=$(eval "echo \$$(echo ${COIN}_POOL)")
      PORT=$(eval "echo \$$(echo ${COIN}_PORT)")
      POOLSTRATUM=$POOL":"$PORT   
      PASSWORD=$(eval "echo \$$(echo ${COIN}_PASSWORD)")
      OPTS=$(eval "echo \$$(echo ${COIN}_OPTS)")
    else
      WORKER=$(eval "echo \$$(echo ${COIN}_${COIN_ALGO}_WORKER)")
      ADDRESS=$(eval "echo \$$(echo ${COIN}_${COIN_ALGO}_ADDRESS)")
      POOL=$(eval "echo \$$(echo ${COIN}_${COIN_ALGO}_POOL)")
      PORT=$(eval "echo \$$(echo ${COIN}_${COIN_ALGO}_PORT)")
      POOLSTRATUM=$POOL":"$PORT   
      PASSWORD=$(eval "echo \$$(echo ${COIN}_${COIN_ALGO}_PASSWORD)")
      OPTS=$(eval "echo \$$(echo ${COIN}_${COIN_ALGO}_OPTS)")
    fi
  fi

  if [ $COIN = "Dual" ]; then
    DUAL1_WORKER=$(eval "echo \$$(echo ${DUAL1}_WORKER)")
    DUAL1_ADDRESS=$(eval "echo \$$(echo ${DUAL1}_ADDRESS)")
    DUAL1_POOL=$(eval "echo \$$(echo ${DUAL1}_POOL)")
    DUAL1_PORT=$(eval "echo \$$(echo ${DUAL1}_PORT)")
    DUAL1_POOLSTRATUM=$DUAL1_POOL":"$DUAL1_PORT   
    DUAL1_PASSWORD=$(eval "echo \$$(echo ${DUAL1}_PASSWORD)")
    DUAL1_OPTS=$(eval "echo \$$(echo ${DUAL1}_OPTS)")

    DUAL2_WORKER=$(eval "echo \$$(echo ${DUAL2}_WORKER)")
    DUAL2_ADDRESS=$(eval "echo \$$(echo ${DUAL2}_ADDRESS)")
    DUAL2_POOL=$(eval "echo \$$(echo ${DUAL2}_POOL)")
    DUAL2_PORT=$(eval "echo \$$(echo ${DUAL2}_PORT)")
    DUAL2_POOLSTRATUM=$DUAL2_POOL":"$DUAL2_PORT   
    DUAL2_PASSWORD=$(eval "echo \$$(echo ${DUAL2}_PASSWORD)")
    DUAL2_OPTS=$(eval "echo \$$(echo ${DUAL2}_OPTS)")
  fi

  ###########################################

  ############# SET MINER VARS ##############

  ALGO=${ALGO,,}

  if [ ! -z $WORKER ]; then
    ADDRESS="$ADDRESS.$WORKER"
  fi

  if [ -z "$OPTS" ]; then
    ZMEWBFSET="--server $POOL --user $ADDRESS --pass $PASSWORD --port $PORT --$API"
    CCMINERSET="-a $ALGO -o $POOLSTRATUM -u $ADDRESS -p $PASSWORD" 
    ETHSET="-G -S -SP 2 $POOLSTRATUM -O $ADDRESS -p $PASSWORD"
    CLAYMORESET="-epool $DUAL1_POOLSTRATUM -ewal $DUAL1_ADDRESS -epsw $DUAL1_PASSWORD -dpool $DUAL2_POOLSTRATUM -dwal $DUAL2_ADDRESS -dpsw  $DUAL2_PASSWORD -dcoin "$DUAL2" -allcoins 1 -allpools 1 -dbg -1"
  else
    ZMEWBFSET="--server $POOL --user $ADDRESS --pass $PASSWORD --port $PORT $OPTS --$API"
    CCMINERSET="-a $ALGO -o $POOLSTRATUM -u $ADDRESS -p $PASSWORD $OPTS" 
    ETHSET="-G -S -SP 2 $POOLSTRATUM -O $ADDRESS -p $PASSWORD $OPTS"
    CLAYMORESET="-epool $DUAL1_POOLSTRATUM -ewal $DUAL1_ADDRESS -epsw $DUAL1_PASSWORD -dpool $DUAL2_POOLSTRATUM -dwal $DUAL2_ADDRESS -dpsw $DUAL2_PASSWORD -dcoin "$DUAL2" -allcoins 1 -allpools 1 -dbg -1 $DUAL2_OPTS"
  fi

  ###########################################

  ################### RUN ###################

  miner_start1
  TRY=1
  while [[ $TRY -le 4 ]]; do
    if [ $MINSOFT = $ZM ] || [ $MINSOFT = $EWBF ]; then
      # echo $MINSOFT $ZMEWBFSET
      screen -dmSL miner $MINSOFT $ZMEWBFSET
    fi
    if [ $MINSOFT = $CCMINER ] || [ $MINSOFT = $CCMINERXEVAN ] || [ $MINSOFT = $ALCCMINER ] || [ $MINSOFT = $TKCCMINER ]; then
      # echo "$MINSOFT $CCMINERSET"
      screen -dmSL miner $MINSOFT $CCMINERSET
    fi
    if [ $MINSOFT = $ETHMINER ]; then
      # echo "$MINSOFT $ETHSET"
      screen -dmSL miner $MINSOFT $ETHSET
    fi
    if [ $MINSOFT = $CLAYMORE ]; then
      # echo "$MINSOFT $CLAYMORESET"
      screen -dmSL miner $MINSOFT $CLAYMORESET
    fi
    sleep 3
    ifExist
    TRY=$((TRY+1))
  done
}
